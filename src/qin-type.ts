export type TryAuth = {
    name: string;
    pass: string;
};

export type Logged = {
    token: string;
    lang: string;
};

export type PathList = {
    path: string;
    list: Array<PathKindName>;
}

export type PathKindName = {
    kind: PathKind;
    name: string;
}

export enum PathKind {
    Folder = "Folder",
    File = "File"
}

export type Where = {
    path: string;
}

export type Transfer = {
    origin: string;
    destiny: string;
}

export type PathRead = {
    path: string;
    base64: boolean;
    rangeStart: number;
    rangeLength: number;
}

export type PathWrite = {
    path: string;
    base64: boolean;
    data: string;
    rangeStart: number;
}

export enum FilesNature {
    Both = "Both",
    Directories = "Directories",
    Files = "Files",
}

export enum FilesOperation {
    Open = "Open",
    Save = "Save"                                                                                                     ,
}

export type FilesDescriptor = {
    description: string;
    extensions: string[];
}

export type Execute = {
    name: string;
    argList?: string[];
    inputList?: string[];
    joinErrs?: boolean;
    logLevel?: LogLevel;
};

export enum LogLevel {
    Error = 0,
    Warn = 1,
    Info = 2,
    Debug = 3,
    Trace = 4,
}

export type IssuedToken = string;

export type IssuedQuestion = {
    token: IssuedToken;
    askCreatedAt?: boolean;
    askOutLines?: boolean;
    askOutLinesFrom?: number;
    askOutLinesUntil?: number;
    askOutLinesSize?: boolean;
    askErrLines?: boolean;
    askErrLinesFrom?: number;
    askErrLinesUntil?: number;
    askErrLinesSize?: boolean;
    askResultCode?: boolean;
    askIsDone?: boolean;
    askHasOut?: boolean;
    askHasErr?: boolean;
    askFinishedAt?: boolean;
};

export type IssuedAnswer = {
    createdAt?: number;
    outLines?: string;
    outLinesFrom?: string[];
    outLinesSize?: number;
    errLines?: string;
    errLinesFrom?: string[];
    errLinesSize?: number;
    resultCode?: number;
    isDone?: boolean;
    hasOut?: boolean;
    hasErr?: boolean;
    finishedAt?: number;
};

export type AskConstantly = {
    stop?: boolean;
    onReceive?: (received: IssuedAnswer) => void;
    onError?: (err: any) => void;
};

export type AskStream = {
    token: string;
    chunks: number;
    onReceive?: (line: string) => void;
    onFinish?: (size: number) => void;
    onError?: (err: any) => void;
};

export enum StreamKind {
    Out = "Out",
    Err = "Err",
}

export type ToInsert = {
    base: string;
    insert: Insert;
}

export type Insert = {
    tableHead: TableHead;
    valuedList: Array<Valued>;
    toGetID: ToGetID;
}

export type ToSelect = {
    base: string;
    select: Select;
}

export type Select = {
    tableHead: TableHead;
    fieldList: Array<Typed>;
    joinList?: Array<Join>;
    filterList?: Array<Filter>;
    orderList?: Array<Order>;
    offset?: number;
    limit?: number;
}

export type ToUpdate = {
    base: string;
    update: Update;
}

export type Update = {
    tableHead: TableHead;
    valuedList: Array<Valued>;
    filterList: Array<Filter>;
    limit: number;
}

export type ToDelete = {
    base: string;
    delete: Delete;
}

export type Delete = {
    tableHead: TableHead;
    filterList: Array<Filter>;
}

export type Table = {
    tableHead: TableHead;
    fieldList: Array<Field>;
    keyPrimaryList: Array<KeyPrimary>;
    keyForeignList: Array<KeyForeign>;
}

export type Field = {
    ord: number;
    name: string;
    nature: Nature;
    size: number;
    precision: number;
    notNull: boolean;
    autoIncrement: boolean;
    autoGenerated: boolean;
    keyPrimary: boolean;
}

export type KeyPrimary = {
    name: string;
    columnList: Array<OrdName>;
}

export type OrdName = {
    ord: number;
    name: string;
}

export type KeyForeign = {
    inName: string;
    outName: string;
    outTableHead: TableHead;
    matchList: Array<Match>;
}

export type Match = {
    ord: number;
    inColumn: string;
    outColumn: string;
}

export type Join = {
    tableHead: TableHead;
    alias: string;
    filterList: Array<Filter>;
    ties: JoinTies;
}

export enum JoinTies {
    Inner = "Inner",
    Left = "Left",
    Right = "Right",
    Full = "Full",
    Cross = "Cross"
}

export type Filter = {
    seems?: FilterSeems;
    likes?: FilterLikes;
    valued?: Valued;
    linked?: Linked;
    ties?: FilterTies;
}

export enum FilterSeems {
    Is = "Is",
    IsNot = "IsNot"
}

export enum FilterLikes {
    Equals = "Equals",
    Bigger = "Bigger",
    Lesser = "Lesser",
    BiggerOrEquals = "BiggerOrEquals",
    LesserOrEquals = "LesserOrEquals",
    StartsWith = "StartsWith",
    EndsWith = "EndsWith",
    Contains = "Contains"
}

export enum FilterTies {
    And = "And",
    Or = "Or"
}

export type Linked = {
    name: string;
    upon: string;
}

export type Order = {
    name: string;
    desc: boolean;
}

export type Registry = {
    base: string;
    tableHead: TableHead;
}

export type Strain = {
    restrict: string;
    modify: string;
    include: string;
}

export type Heads = Array<TableHead>;

export type TableHead = {
    catalog?: string;
    schema?: string;
    name: string;
    alias?: string;
}

export type ToGetID = {
    name: string;
    filter: Valued;
}

export type NamedChars = {
    name: string;
    chars: string;
}

export type Valued = {
    name: string;
    type?: Nature;
    data: any;
}

export type Typed = {
    name: string;
    type: Nature;
    alias?: string;
}

export enum Nature {
    Bool = "Bool",
    Bit = "Bit",
    Byte = "Byte",
    Tiny = "Tiny",
    Small = "Small",
    Int = "Int",
    Long = "Long",
    BigInt = "BigInt",
    Serial = "Serial",
    BigSerial = "BigSerial",
    Float = "Float",
    Real = "Real",
    Double = "Double",
    Numeric = "Numeric",
    BigNumeric = "BigNumeric",
    Char = "Char",
    Chars = "Chars",
    Date = "Date",
    Time = "Time",
    DateTime = "DateTime",
    ZoneTime = "ZoneTime",
    Timestamp = "Timestamp",
    Bytes = "Bytes",
    Blob = "Blob",
    Text = "Text",
    Object = "Object"
}

export type Setup = {
    serverName?: string;
    serverLang?: string;
    serverHost?: string;
    serverPort?: number;
    serverFolder?: string;
    servesPub?: boolean;
    servesApp?: boolean;
    servesDir?: boolean;
    servesCmd?: boolean;
    servesBas?: boolean;
    servesReg?: boolean;
    servesGiz?: boolean;

    configMap?: Map<string, string>;
    redirectMap?: Map<string, string>;

    threadsMin?: number;
    threadsMax?: number;
    threadsIdleTimeout?: number;
    cleanInterval?: number;
    tokenValidity?: number;
}

export type Bases = Array<BasedWays>;

export type BasedWays = {
    dataJdbc: BasedJdbc;
    dataLink: BasedLink;
    poolMinIdle: number;
    poolMaxIdle: number;
    poolMaxTotal: number;
}

export type BasedJdbc = {
    name: string;
    url: string;
    user: string;
    pass: string;
}

export type BasedLink = {
    name: string;
    base: Based;
    path: string;
    port: number;
    data: string;
    user: string;
    pass: string;
}

export enum Based {
    SQLiteMemory = "SQLiteMemory",
    SQLiteLocal = "SQLiteLocal",
    HSQLDBMemory = "HSQLDBMemory", 
    HSQLDBLocal = "HSQLDBLocal",
    HSQLDBClient = "HSQLDBClient", 
    DerbyInner = "DerbyInner",
    DerbyClient = "DerbyClient",
    FirebirdLocal = "FirebirdLocal",
    FirebirdInner = "FirebirdInner",
    FirebirdClient = "FirebirdClient",
    MySQLClient = "MySQLClient",
    PostgreClient = "PostgreClient" 
}

export type Users = Array<User>;

export type User = {
    name: string;
    pass: string;
    home: string;
    lang: string;
    master: boolean;
    allowList: Array<Allow>;
    configMap: Map<string, string>;
    group: string;
}

export type Groups = Array<Group>;

export type Group = {
    name: string;
    home: string;
    lang: string;
    master: boolean;
    allowList: Array<Allow>;
    configMap: Map<string, string>;
}

export type Allow = {
    allowApp: AllowApp;
    allowDir: AllowDir;
    allowCmd: AllowCmd;
    allowBas: AllowBas;
    allowReg: AllowReg;
    allowGiz: AllowGiz;
}

export type AllowApp = {
    name: string;
}

export type AllowDir = {
    path: string;
    mutate: boolean;
}

export type AllowCmd = {
    name: string;
    args: Array<string>;
}

export type AllowBas = {
    name: string;
    mutate: boolean;
}

export type AllowReg = {
    registry: Registry;
    all: boolean;
    insert: boolean;
    select: boolean;
    update: boolean;
    delete: boolean;
    strain: Strain;
}

export type AllowGiz = {
    path: string;
}
